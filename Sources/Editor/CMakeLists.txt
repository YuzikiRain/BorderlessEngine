cmake_minimum_required(VERSION 3.5)
project(borderlessengine_editor)

set (PROJECT_LIBRARIES)
set(PROJECT_INCLUDE)
set(PROJECT_SOURCE)
set(PACKAGE_PATH ${CMAKE_SOURCE_DIR}/Packages)
set(PACKAGE_INCLUDE_PATH ${PACKAGE_PATH}/Include)
set(PACKAGE_SOURCE_PATH ${PACKAGE_PATH}/Source)
set(PACKAGE_LIBRARY_PATH ${PACKAGE_PATH}/Library)
set(BORDERLESSENGINE_RUNTIME ${CMAKE_SOURCE_DIR}/Sources/Runtime)

list(APPEND PROJECT_INCLUDE ${PROJECT_SOURCE_DIR})
list(APPEND PROJECT_INCLUDE ${BORDERLESSENGINE_RUNTIME})
list(APPEND PROJECT_INCLUDE ${PACKAGE_INCLUDE_PATH})

# GLFW
# set(GLFW_INCLUDE ${PACKAGE_INCLUDE_PATH}/GLFW)
set(GLFW_LIB ${PACKAGE_LIBRARY_PATH}/GLFW/glfw3dll.lib)
# list(APPEND PROJECT_INCLUDE ${GLFW_INCLUDE})
list(APPEND PROJECT_LIBRARIES ${GLFW_LIB})

# glad
set(GLAD_INCLUDE ${PACKAGE_INCLUDE_PATH}/glad)
set(GLAD_SRC ${PACKAGE_SOURCE_PATH}/glad)
# list(APPEND PROJECT_INCLUDE ${GLAD_INCLUDE})
list(APPEND PROJECT_SOURCE ${GLAD_SRC}/glad.c)

# yaml
list(APPEND ${PACKAGE_LIBRARY_PATH}/yaml-cpp/yaml-cppd.dll)

# dear imgui
list(APPEND PROJECT_INCLUDE ${PACKAGE_INCLUDE_PATH}/imgui)
list(APPEND PROJECT_INCLUDE ${PACKAGE_INCLUDE_PATH}/imgui/backends)

set(IMGUI_SOURCE_PATH ${PACKAGE_SOURCE_PATH}/imgui)
set(IMGUI_SOURCE)
list(APPEND IMGUI_SOURCE ${IMGUI_SOURCE_PATH}/imgui.cpp)
# list(APPEND IMGUI_SOURCE ${IMGUI_SOURCE_PATH}/imgui_demo.cpp)
list(APPEND IMGUI_SOURCE ${IMGUI_SOURCE_PATH}/imgui_draw.cpp)
list(APPEND IMGUI_SOURCE ${IMGUI_SOURCE_PATH}/imgui_widgets.cpp)
list(APPEND IMGUI_SOURCE ${IMGUI_SOURCE_PATH}/backends/imgui_impl_glfw.cpp)
list(APPEND IMGUI_SOURCE ${IMGUI_SOURCE_PATH}/backends/imgui_impl_opengl2.cpp)
# list(APPEND IMGUI_SOURCE ${IMGUI_SOURCE_PATH}/backends/imgui_impl_opengl3.cpp)
message(${IMGUI_SOURCE})

#other
file ( GLOB_RECURSE Module_SOURCE true RELATIVE ${PROJECT_SOURCE_DIR} *.cpp)

add_library(${PROJECT_NAME} STATIC ${PROJECT_SOURCE} ${Module_SOURCE} ${IMGUI_SOURCE})
target_include_directories(${PROJECT_NAME} PUBLIC ${PROJECT_INCLUDE})
target_link_libraries(${PROJECT_NAME} PRIVATE ${GLFW_LIB})
